{"version":3,"sources":["logo.png","ArtGallery/BackgroundMusic/music.mp3","serviceWorker.js","ArtGallery/Search/Search.js","ArtGallery/Nav/Nav.js","ArtGallery/CardItem/CardItem.js","baseURL.js","ArtGallery/Gallery/Gallery.js","ArtGallery/ChatBox/index.js","ArtGallery/FloatingArrow/FloatingArrow.js","Firebase/firebase.js","ArtGallery/ZoomCardItem/ZoomCardItem.js","ArtGallery/ArtGallery.js","ArtGallery/BackgroundMusic/index.js","App/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Search","props","useState","search","setSearch","useEffect","charAt","toUpperCase","slice","id","className","onSubmit","e","preventDefault","handleSearch","onChange","event","searchText","target","value","substr","toLowerCase","placeholder","onClick","Nav","recieveSearchText","useCallback","propsChild","handleNavSearch","alt","src","require","href","class","Card","currentCard","title","url","effect","placeholderSrc","created_at","CardItem","handleClickedCard","baseURL","Gallery","cardItemsData","setCardItemsData","isLoading","setIsLoading","setClickedCard","recieveCardDetails","card","console","log","handleGalleryClickedCard","intervalId","setInterval","a","fetch","response","json","status","clearInterval","error","axios","get","data","fetchImages","cardItemsList","list","values","Object","filter","i","titleFlag","indexOf","tagsFlag","tags","tag","filterCards","map","key","_id","createCardItemsList","length","socket","io","Chatbox","isOpen","setIsOpen","username","setUsername","isChatting","setIsChatting","message","setMessage","messages","setMessages","onlineUsers","setOnlineUsers","handleReceiveMessage","prev","on","count","off","handleSendMessage","trim","msgData","text","emit","type","msg","index","onKeyDown","FloatingArrow","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","err","test","database","auth","GoogleAuthProvider","ZoomCardItem","childProps","handleTagSearch","ZoomImage","description","Like","zoomIn","zoomOut","resetTransform","Fragment","likeClassName","setLikeClassName","parseInt","likes","likeCounter","setLikeCounter","like","method","headers","then","ok","Error","image","catch","onAnimationEnd","ArtGallery","lock","setLock","setCard","wide","setWide","windowWidth","recieveNavSearchText","recieveTagSearchText","cardId","recieveCardFromServer","btoa","cardData","createdAt","undefined","BackgroundMusic","Audio","audio","modalVisible","setModalVisible","setMusicEnabled","loop","play","style","marginRight","pause","currentTime","App","getWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","width","height","innerWidth","innerHeight","rootElement","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d10b3f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0fa74170.png\";","module.exports = __webpack_public_path__ + \"static/media/music.b8f06cd1.mp3\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./search.css\";\r\n\r\nexport const Search = (props) => {\r\n  const [search, setSearch] = useState(props.search);\r\n\r\n  useEffect(\r\n    () => {\r\n      setSearch(props.search.charAt(0).toUpperCase() + props.search.slice(1));\r\n    },\r\n    [props.search] // Occurs when the state within is changing\r\n  );\r\n\r\n  /**\r\n   * When occrs event 'onChange' in the search input,\r\n   * update the parent props {handleSearch} with the search text.\r\n   * @param {onChange} event\r\n   */\r\n  function updateSearch(event) {\r\n    // Get the search text when occurs event 'onChange'\r\n    let searchText = event.target.value.substr(0, 30).toLowerCase();\r\n    setSearch(searchText);\r\n\r\n    // Update the parent's props {handleSearch} with the search text\r\n    props.handleSearch(searchText);\r\n  }\r\n\r\n  function deleteSearch() {\r\n    // Get the search text when occurs event 'delete search'\r\n    let searchText = \"\";\r\n    setSearch(searchText);\r\n\r\n    // Update the parent's props {handleSearch} with the search text\r\n    props.handleSearch(searchText);\r\n  }\r\n\r\n  const updateSearchOnSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.handleSearch(search);\r\n  };\r\n\r\n  return (\r\n    <div id=\"searchContainer\" className=\"search-container\">\r\n      <i id=\"searchIcon\" className=\"fa fa-search search-icon\" />\r\n      <form onSubmit={updateSearchOnSubmit}>\r\n        <input\r\n          id=\"searchInput\"\r\n          className=\"search-input\"\r\n          onChange={updateSearch}\r\n          placeholder=\"Search\"\r\n          value={search}\r\n        />\r\n      </form>\r\n\r\n      <i\r\n        className={\r\n          search\r\n            ? \"fas fa-times delete-icon show\"\r\n            : \"fas fa-times delete-icon hide\"\r\n        }\r\n        onClick={deleteSearch}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useCallback } from \"react\";\r\nimport \"./nav.css\";\r\nimport { Search } from \"../Search/Search\";\r\n\r\nexport const Nav = (props) => {\r\n\r\n  const [search, setSearch] = useState(props.search);\r\n\r\n  // Recieve search data from Search component, init search state\r\n  const recieveSearchText = useCallback(\r\n    (propsChild) => {\r\n      // Update searched text in the state\r\n      setSearch(props);\r\n\r\n      // Update the parent's props {handleNavSearch} with the search text\r\n      // (ArtGallery component - Search grandparent component)\r\n      props.handleNavSearch(propsChild);\r\n    },\r\n    [] \r\n  );\r\n\r\n  return (\r\n    <div id=\"navContainer\" className=\"nav-container\">\r\n      <div id=\"logoContainer\" className=\"logo-container\">\r\n        <img id=\"logoImage\" className=\"logo-image\" alt=\"logo\" src={require('../../logo.png')} />\r\n      </div>\r\n      <Search search={props.search} handleSearch={recieveSearchText} />\r\n      <div id=\"iconsContainer\" className=\"icons-container\">\r\n        <div id=\"homeIconContainer\" className=\"icon-container\">\r\n          <a href=\"https://www.facebook.com/zozorender3d\" target=\"_blank\">\r\n            <i id=\"home\" className=\"fa fa-home icon bar-icon\" />\r\n          </a>\r\n        </div>\r\n        <div id=\"contactIconContainer\" className=\"icon-container\">\r\n          <a href=\"https://audition-plth.onrender.com/\" target=\"_blank\">\r\n            {/* <i id=\"contact\" className=\"fa fa-envelope icon bar-icon\" /> */}\r\n            <i class=\"fa-solid fa-gamepad icon bar-icon\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// import React from \"react\";\r\n// import \"./card-item.css\";\r\n// import { LazyLoadImage } from 'react-lazy-load-image-component';\r\n// import 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\n// /**\r\n//  * Card component\r\n//  * @param {Card currentCard} props\r\n//  */\r\n// function Card({ currentCard }) {\r\n//   return (\r\n//     <div id=\"cardContainer\" className=\"card-container card-border\">\r\n//       <div className=\"card-image-container\">\r\n//         <LazyLoadImage\r\n//           id=\"cardImage\"\r\n//           className=\"card-image\"\r\n//           alt={currentCard.title}\r\n//           src={currentCard.url}\r\n//           effect=\"blur\" // Làm mờ khi đang tải ảnh\r\n//         />\r\n//       </div>\r\n//       <div className=\"overlay\">\r\n//         <div id=\"cardTitleContainer\" className=\"items card-title-container\">\r\n//           <p id=\"cardTitle\">{currentCard.title}</p>\r\n//           <hr />\r\n//         </div>\r\n//         <div id=\"cardDateContainer\" className=\"items card-date-container\">\r\n//           <p id=\"cardDate\">{currentCard.created_at}</p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export const CardItem = ({ currentCard, handleClickedCard }) => (\r\n//   <li onClick={() => handleClickedCard(currentCard)}>\r\n//     <Card currentCard={currentCard} />\r\n//   </li>\r\n// );\r\n\r\n\r\nimport React from \"react\";\r\nimport \"./card-item.css\";\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\n/**\r\n * Card component\r\n * @param {Card currentCard} props\r\n */\r\nfunction Card({ currentCard }) {\r\n  return (\r\n    <div id=\"cardContainer\" className=\"card-container card-border\">\r\n      <div className=\"card-image-container\">\r\n        <LazyLoadImage\r\n          id=\"cardImage\"\r\n          className=\"card-image\"\r\n          alt={currentCard.title}\r\n          src={currentCard.url}\r\n          effect=\"blur\" // Làm mờ khi đang tải ảnh\r\n          placeholderSrc=\"https://via.placeholder.com/300x200?text=Loading...\" // Ảnh chờ\r\n        />\r\n      </div>\r\n      <div className=\"overlay\">\r\n        <div id=\"cardTitleContainer\" className=\"items card-title-container\">\r\n          <p id=\"cardTitle\">{currentCard.title}</p>\r\n          <hr />\r\n        </div>\r\n        <div id=\"cardDateContainer\" className=\"items card-date-container\">\r\n          <p id=\"cardDate\">{currentCard.created_at}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const CardItem = ({ currentCard, handleClickedCard }) => (\r\n  <li onClick={() => handleClickedCard(currentCard)}>\r\n    <Card currentCard={currentCard} />\r\n  </li>\r\n);\r\n","// export const baseURL = 'http://localhost:5000'\r\nexport const baseURL = 'https://server-gallery-react.onrender.com'","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./gallery.css\";\r\nimport { CardItem } from \"../CardItem/CardItem\";\r\nimport axios from \"axios\";\r\nimport { baseURL } from \"../../baseURL\";\r\n\r\nexport const Gallery = props => {\r\n  // State using for extractig cards data from DB\r\n  const [cardItemsData, setCardItemsData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [clickedCard, setClickedCard] = useState([]);\r\n\r\n  const recieveCardDetails = useCallback(\r\n    propsChild => {\r\n      let card = propsChild;\r\n      console.log(card)\r\n\r\n      setClickedCard(card);\r\n      props.handleGalleryClickedCard(card);\r\n    },\r\n    [] \r\n  );\r\n\r\n// Kiểm tra trạng thái server mỗi 2 giây, dừng khi server đã sẵn sàng\r\nuseEffect(() => {\r\n  let intervalId;\r\n  const checkServerStatus = async () => {\r\n    try {\r\n      const response = await fetch(baseURL + \"/status\");\r\n      const data = await response.json();\r\n      if (data.status === \"ready\") {\r\n        setIsLoading(false);\r\n        clearInterval(intervalId); // Dừng kiểm tra\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error checking server status:\", error);\r\n    }\r\n  };\r\n\r\n  // Gọi kiểm tra trạng thái server mỗi 2 giây\r\n  intervalId = setInterval(checkServerStatus, 2000);\r\n  // Dọn dẹp khi server đã sẵn sàng hoặc khi component unmount\r\n  return () => clearInterval(intervalId);\r\n}, []); // `[]` để useEffect chỉ chạy khi component mount\r\n\r\n// Gọi API để lấy danh sách hình ảnh\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      try {\r\n        const response = await axios.get(baseURL+'/images');\r\n        setIsLoading(false)\r\n        setCardItemsData(response.data); // Lưu danh sách hình ảnh vào state\r\n      } catch (error) {\r\n        console.error('Error fetching images:', error);\r\n      }\r\n    };\r\n\r\n    fetchImages();\r\n  }, [isLoading]); // Chỉ gọi API 1 lần khi component được mount\r\n\r\n  let cardItemsList = createCardItemsList(\r\n    props.search,\r\n    cardItemsData,\r\n    recieveCardDetails\r\n  );\r\n\r\n  return (\r\n    <div id=\"galleryContainer\" className=\"gallery-container\">\r\n      <ul id=\"gallery\" className=\"gallery\r\n      \">\r\n        {\r\n        isLoading\r\n        ? <span class=\"loader\"></span>  // Hiển thị trạng thái loading khi isLoading là true\r\n        : cardItemsList         // Hiển thị danh sách ảnh khi đã tải xong\r\n      }\r\n      </ul>\r\n      <p id=\"cardsCounter\" className=\"cards-counter\">\r\n        {cardItemsList.length} items found\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Extract JSON recieved from DB {cardItemsData}\r\n * init new {CardItem} component for each JSON object, as props\r\n * @param {State} cardItemsData\r\n */\r\nfunction createCardItemsList(search, cardItemsData, recieveCardDetails) {\r\n  let values = Object.values(cardItemsData);\r\n  let list;\r\n\r\n  if (search) {\r\n    list = filterCards(values, search);\r\n  } else {\r\n    list = values;\r\n  }\r\n\r\n  let cardItemsList = list.map(i => (\r\n    <CardItem\r\n      currentCard={i}\r\n      key={i._id}\r\n      handleClickedCard={recieveCardDetails}\r\n    />\r\n  ));\r\n\r\n  return cardItemsList;\r\n}\r\n\r\n/**\r\n * Filter the cards according to the search text\r\n */\r\nfunction filterCards(values, search) {\r\n  let filtered = values.filter(i => {\r\n    // Filter card by the title\r\n    let titleFlag = i.title.toLowerCase().indexOf(search) !== -1;\r\n\r\n    // Filter card by the tags, if not filtered by the title\r\n    let tagsFlag = false;\r\n    if (!titleFlag && i.tags) {\r\n      i.tags.filter(tag => {\r\n        if (!tagsFlag) {\r\n          tagsFlag = tag.toLowerCase().indexOf(search) !== -1;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Return if the card chosen by the filtering\r\n    return titleFlag || tagsFlag;\r\n  });\r\n\r\n  return filtered;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport \"./ChatBox.css\";\r\nimport { baseURL } from \"../../baseURL\";\r\n\r\n// const socket = io(\"http://localhost:5000\"); // Đổi thành URL của server bạn\r\nconst socket = io(baseURL); // Đổi thành URL của server bạn\r\n\r\nconst Chatbox = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [isChatting, setIsChatting] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Khi kết nối, lấy ID của mình\r\n    // socket.on(\"connect\", () => {\r\n    //   setMyId(socket.id);\r\n    //   console.log(\"My ID:\", socket.id);\r\n    // });\r\n    const handleReceiveMessage = (data) => {\r\n      console.log(\"Nhận tin nhắn:\", data);\r\n      setMessages((prev) => [...prev, data]);\r\n      console.log(messages)\r\n    };\r\n\r\n    socket.on(\"update_online_users\", (count) => {\r\n      console.log(\"Số người online:\", count);\r\n      setOnlineUsers(count);\r\n    });\r\n  \r\n    socket.on(\"receive_message\", handleReceiveMessage);\r\n  \r\n    return () => {\r\n      socket.off(\"update_online_users\");\r\n      socket.off(\"receive_message\", handleReceiveMessage); // Dọn dẹp sự kiện khi component unmount\r\n    };\r\n  }, []);\r\n  \r\n\r\n  const handleSendMessage = () => {\r\n    if (message.trim()) {\r\n      const msgData = { username, text: message };\r\n      socket.emit(\"send_message\", msgData);\r\n      setMessages((prev) => [...prev, msgData]);\r\n      setMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      {/* Nút mở chat */}\r\n      {!isOpen && (\r\n        <button className=\"chat-icon\" onClick={() => setIsOpen(true)}>\r\n          Chat\r\n        </button>\r\n      )}\r\n\r\n      {/* Nhập tên */}\r\n      {isOpen && !isChatting && (\r\n        <div className=\"chat-login\">\r\n          \r\n          <div>Số người đang online: {onlineUsers}</div>\r\n          <h2>Nhập tên</h2>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Tên của bạn...\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <button onClick={() => username.trim() && setIsChatting(true)}>\r\n            Vào chat\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Khung chat */}\r\n      {isOpen && isChatting && (\r\n        <div className=\"chat-box\">\r\n          <div>Số người đang online: {onlineUsers}</div>\r\n          <button className=\"chat-close\" onClick={() => setIsOpen(false)}>\r\n            Đóng\r\n          </button>\r\n          <h2>Chatbox</h2>\r\n          <div className=\"chat-messages\">\r\n            {messages.map((msg, index) => (\r\n              <div key={index} className=\"chat-message\">\r\n                <strong>{msg.username}:</strong> {msg.text}\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <div className=\"chat-input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Nhập tin nhắn...\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) => e.key === \"Enter\" && handleSendMessage()}\r\n            />\r\n            <button onClick={handleSendMessage}>Gửi</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport \"./floating-arrow.css\";\r\nimport Chatbox from \"../ChatBox\";\r\n\r\nexport const FloatingArrow = () => {\r\n  return (\r\n    <a href=\"#\">\r\n      <div className=\"arrow-container\">\r\n        <div className=\"round\">\r\n          <i className=\"fa fa-angle-up arrow\" />\r\n          <i className=\"fa fa-angle-up arrow bottom-arrow\" />\r\n        </div>\r\n        <Chatbox />\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n","import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBbkn86NAs0iCCE6i3dMjxctS-r93_d50s\",\r\n  authDomain: \"artgallery-4c02e.firebaseapp.com\",\r\n  databaseURL: \"https://artgallery-4c02e.firebaseio.com\",\r\n  projectId: \"artgallery-4c02e\",\r\n  storageBucket: \"artgallery-4c02e.appspot.com\",\r\n  messagingSenderId: \"955387804026\",\r\n  appId: \"1:955387804026:web:d9fa5f3954d08b61983ec3\",\r\n  measurementId: \"G-E986Y4Q017\",\r\n\r\n  // apiKey: \"AIzaSyCZg8McvBs6f0sITpTygsprG6BCuveHlHI\",\r\n  // authDomain: \"photo-gallery-98c05.firebaseapp.com\",\r\n  // databaseURL: \"https://photo-gallery-98c05.firebaseio.com\",\r\n  // projectId: \"photo-gallery-98c05\",\r\n  // storageBucket: \"photo-gallery-98c05.firebasestorage.app\",\r\n  // messagingSenderId: \"1064258223496\",\r\n  // appId: \"1:1064258223496:web:a0f3379a92647c02740e3d\",\r\n  // measurementId: \"G-RRPECNDPFJ\"\r\n};\r\n// Initialize Firebase\r\ntry {\r\n  firebase.initializeApp(firebaseConfig);\r\n} catch (err) {\r\n  // we skip the \"already exists\" message which is\r\n  // not an actual error when we're hot-reloading\r\n  if (!/already exists/.test(err.message)) {\r\n    //console.error(\"Firebase initialization error\", err.stack);\r\n  }\r\n}\r\n// Get a reference to the database service\r\nvar database = firebase.database();\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\nexport default firebase;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./zoom-card-item.css\";\r\nimport firebase from \"../../Firebase/firebase\";\r\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\r\nimport { baseURL } from \"../../baseURL\";\r\n\r\nexport const ZoomCardItem = (props) => {\r\n  const card = props.card;\r\n\r\n  console.log(card)\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  // Recieve search data from Search component, init search state\r\n  const recieveTagText = useCallback(\r\n    (childProps) => {\r\n      // Update searched text in the state\r\n      setSearch(childProps);\r\n\r\n      // Update the parent's props {handleNavSearch} with the search text\r\n      // (ArtGallery component - Search grandparent component)\r\n      props.handleTagSearch(childProps);\r\n    },\r\n    [] //search\r\n  );\r\n\r\n  // const tagsList = createTagsList(card.tags, recieveTagText);\r\n\r\n  return (\r\n      <div className=\"zoom-container\">\r\n        <ZoomImage card={card} />\r\n        <div id=\"detailsContainer\" className=\"details-container\">\r\n          <p id=\"title\" className=\"title\">\r\n            {card.title}\r\n          </p>\r\n          <hr />\r\n          <p id=\"description\">{card.description}</p>\r\n          <p id=\"date\" className=\"date\">\r\n            – {card.created_at}\r\n          </p>\r\n          {/* <ul>{tagsList}</ul> */}\r\n          \r\n          <div className=\"likes-container\">\r\n            <Like card={card} />\r\n            {/* <Dislike card={card} /> */}\r\n          </div>\r\n          \r\n        </div>\r\n      </div>\r\n  );\r\n};\r\n\r\n// function createTagsList(tags, recieveTagText) {\r\n//   console.log(tags)\r\n//   let tagsList = tags.map((i) => (\r\n//     <Tag currentTag={i} key={i} handleTagSearch={recieveTagText} />\r\n//   ));\r\n//   return tagsList;\r\n// }\r\n\r\n// function Tag(props) {\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [tag, setTag] = useState(props.currentTag.toString());\r\n\r\n//   function updateSearch(event) {\r\n//     event.preventDefault();\r\n\r\n//     // Get the search text when occurs event 'onChange'\r\n//     setSearch(tag);\r\n\r\n//     // Update the parent's props {handleSearch} with the search text\r\n//     props.handleTagSearch(tag);\r\n//   }\r\n\r\n//   return (\r\n//     <li className=\"tag\" onClick={updateSearch}>\r\n//       #{tag}\r\n//     </li>\r\n//   );\r\n// }\r\n\r\nfunction ZoomImage(props) {\r\n  let card = props.card;\r\n  return (\r\n    <div id=\"imageContainer\" className=\"image-container\">\r\n      <TransformWrapper>\r\n        {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\r\n          <React.Fragment>\r\n            <div className=\"image-wrapper\">\r\n              <TransformComponent>\r\n                <img\r\n                  id=\"image\"\r\n                  className=\"image\"\r\n                  src={card.url}\r\n                  alt={card.title}\r\n                />\r\n              </TransformComponent>\r\n            </div>\r\n            <div className=\"tools\">\r\n              <button className=\"zoom-in-btn\" onClick={zoomIn}>\r\n                <i className=\"fas fa-search-plus zoom-in-icon\" />\r\n              </button>\r\n              <button className=\"zoom-out-btn\" onClick={zoomOut}>\r\n                <i className=\"fas fa-search-minus zoom-out-icon\" />\r\n              </button>\r\n              <button className=\"zoom-reset-btn\" onClick={resetTransform}>\r\n                <i className=\"fas fa-expand zoom-reset-icon\" />\r\n              </button>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n      </TransformWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Like(props) {\r\n  let card = props.card;\r\n\r\n  const [likeClassName, setLikeClassName] = useState(false);\r\n  const [likeCounter, setLikeCounter] = useState(function () {\r\n    return parseInt(props.card.likes, 10);\r\n  });\r\n\r\n  useEffect(() => {\r\n    setLikeCounter(parseInt(props.card.like, 10));\r\n  }, [props.card.likes]);\r\n\r\n  useEffect(() => {\r\n    setLikeCounter(parseInt(props.card.like, 10));\r\n  }, [props]);\r\n\r\n  function updateLikeDB() {\r\n    console.log(\"Card ID:\", card.id); // Kiểm tra ID trước khi gọi API\r\n  \r\n    if (!card.id) {\r\n      console.error(\"Error: Card ID is undefined!\");\r\n      return;\r\n    }\r\n  \r\n    fetch(`${baseURL}/images/${card.id}/like`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to like image\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.image) {\r\n          setLikeClassName(!likeClassName);\r\n          setLikeCounter(data.image.like);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error liking image:\", error);\r\n      });\r\n  }\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"like-container\">\r\n      <i\r\n        className={\r\n          likeClassName\r\n            ? \"fa fa-heart like-icon like-icon-anim\"\r\n            : \"fa fa-heart like-icon \"\r\n        }\r\n        onClick={updateLikeDB}\r\n        onAnimationEnd={() => setLikeClassName(!likeClassName)}\r\n      />\r\n      <p id=\"likes\">{likeCounter}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\n// function Dislike(props) {\r\n//   let card = props.card;\r\n\r\n//   const [dislikeClassName, setDislikeClassName] = useState(false);\r\n//   const [dislikeCounter, setDislikeCounter] = useState(function () {\r\n//     return parseInt(props.card.likes, 10);\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     setDislikeCounter(parseInt(props.card.dislikes, 10));\r\n//   }, [props.card.dislikes]);\r\n\r\n//   useEffect(() => {\r\n//     setDislikeCounter(parseInt(props.card.dislikes, 10));\r\n//   }, [props]);\r\n\r\n//   function updateDislikeDB() {\r\n//     var updates = {};\r\n//     updates[\"/Cards/\" + card.id + \"/dislikes\"] = dislikeCounter + 1;\r\n//     firebase\r\n//       .database()\r\n//       .ref()\r\n//       .update(updates, function (error) {\r\n//         if (error) {\r\n//           return false;\r\n//         } else {\r\n//           // Data saved successfully, update the view of the dislikes counter\r\n//           setDislikeClassName(!dislikeClassName);\r\n//           setDislikeCounter(dislikeCounter + 1);\r\n//           return true;\r\n//         }\r\n//       });\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"dislike-container\">\r\n//       <i\r\n//         className={\r\n//           dislikeClassName\r\n//             ? \"fas fa-heart-broken dislike-icon dislike-icon-anim\"\r\n//             : \"fas fa-heart-broken dislike-icon\"\r\n//         }\r\n//         onClick={updateDislikeDB}\r\n//         onAnimationEnd={() => setDislikeClassName(!dislikeClassName)}\r\n//       />\r\n//       <p id=\"dislikes\" className=\"dislikes\">\r\n//         {dislikeCounter}\r\n//       </p>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport ScrollLock from \"react-scrolllock\";\r\nimport axios from \"axios\"; // Import axios để gọi API từ server\r\n\r\nimport { Nav } from \"./Nav/Nav\";\r\nimport { Gallery } from \"./Gallery/Gallery\";\r\nimport { FloatingArrow } from \"./FloatingArrow/FloatingArrow\";\r\nimport { ZoomCardItem } from \"./ZoomCardItem/ZoomCardItem\";\r\n\r\nimport \"./art-gallery.css\";\r\nimport { baseURL } from \"../baseURL\";\r\n\r\nexport const ArtGallery = (props) => {\r\n  const [lock, setLock] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [card, setCard] = useState([]);\r\n  const [wide, setWide] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.windowWidth < 501) {\r\n      console.log(\"narrow\");\r\n      setWide(false);\r\n    } else {\r\n      setWide(true);\r\n    }\r\n  }, [props.windowWidth]);\r\n\r\n  const recieveNavSearchText = useCallback((props) => {\r\n    // Update searched text in the state\r\n    setSearch(props);\r\n  }, []);\r\n\r\n  const recieveTagSearchText = useCallback((props) => {\r\n    // Update searched text in the state\r\n    setLock(false);\r\n    setSearch(props.toLowerCase());\r\n  }, []);\r\n\r\n  const recieveCardDetails = useCallback((propsChild) => {\r\n    console.log(propsChild)\r\n    let cardId = propsChild._id;\r\n    console.log(\"from recieveCardDetails\", cardId);\r\n\r\n    recieveCardFromServer(cardId); // Gọi API thay vì Firebase\r\n  }, []);\r\n\r\n  // // Hàm thay thế để lấy dữ liệu từ server\r\n  // async function recieveCardFromServer(cardId) {\r\n\r\n  //   console.log(cardId)\r\n  //   try {\r\n  //     // Gọi API để lấy dữ liệu card từ server\r\n  //     const response = await axios.get(`http://localhost:5000/cards/${cardId}`);\r\n  //     const cardData = response.data;\r\n\r\n  //     // Lưu thông tin card vào state\r\n  //     setCard(cardData);\r\n  //     setLock(true); // Mở khoá và hiển thị zoom card\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching card details:\", error);\r\n  //   }\r\n  // }\r\n\r\n  async function recieveCardFromServer(cardId) {\r\n    console.log(cardId);\r\n    try {\r\n      // Gọi API Cloudinary để lấy thông tin ảnh từ Cloudinary\r\n      const response = await axios.get(`${baseURL}/images/${cardId}`, {\r\n        headers: {\r\n          'Authorization': `Basic ${btoa('0Ag49RB9uUxpHCw-KHR-yxHK6yI')}`, // Thêm API key và secret nếu cần\r\n        }\r\n      });\r\n\r\n      // // Lấy dữ liệu từ API Cloudinary\r\n      // const cardData = {\r\n      //   id: response.data.id,\r\n      //   url: response.data.url,\r\n      //   title: response.data.title || 'No title', // Lấy title từ context\r\n      //   description: response.data.description || 'No description', // Lấy description từ context\r\n      //   tags: response.data.context?.custom?.tags || [], // Lấy tags từ context\r\n      //   created_at: new Date(response.data.created_at).toLocaleString(),\r\n      // };\r\n\r\n      // // Lưu thông tin card vào state\r\n      // setCard(cardData);\r\n      const cardData = {\r\n        id: response.data._id,\r\n        url: response.data.url,\r\n        description: response.data.description,\r\n        title: response.data.title,\r\n        created_at: response.data.createdAt,\r\n        like: response.data.like\r\n      }\r\n\r\n      setCard(cardData)\r\n\r\n      console.log(cardData)\r\n      setLock(true); // Mở khoá và hiển thị zoom card\r\n    } catch (error) {\r\n      console.error(\"Error fetching card details from Cloudinary:\", error);\r\n    }\r\n}\r\n\r\n  \r\n\r\n  return (\r\n    <div id=\"ArtGallery\" className=\"wide-art-gallery\">\r\n      <div\r\n        className={\r\n          lock\r\n            ? wide\r\n              ? \"art-gallery-background avoid-clicks\"\r\n              : \"art-gallery-background avoid-clicks no-scroll\"\r\n            : \"\"\r\n        }\r\n      >\r\n        <Nav search={search} handleNavSearch={recieveNavSearchText} />\r\n        <Gallery\r\n          search={search}\r\n          handleGalleryClickedCard={recieveCardDetails}\r\n        />\r\n        {wide && lock && <ScrollLock />}\r\n      </div>\r\n\r\n      {card === undefined || card.length === 0 || !lock ? (\r\n        <FloatingArrow />\r\n      ) : (\r\n        <div className={wide ? \"zoom-card-wide\" : \"zoom-card-narrow\"}>\r\n          <i\r\n            className=\"fas fa-times exit-icon\"\r\n            onClick={() => setLock(false)}\r\n          />\r\n          <ZoomCardItem card={card} handleTagSearch={recieveTagSearchText} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// import React, { useState, useEffect } from 'react';\r\n// import './BackgroundMusic.css'\r\n\r\n// const BackgroundMusic = () => {\r\n//   const [audio] = useState(new Audio(require('./music.mp3')));\r\n//   const [modalVisible, setModalVisible] = useState(true); // Hiển thị modal\r\n\r\n//   const handlePlayMusic = () => {\r\n//     // Người dùng nhấn OK\r\n//     console.log(audio.play())\r\n//     audio.loop = true; // Lặp lại nhạc\r\n//     audio.play().catch(error => {\r\n//       console.error(\"Error playing audio:\", error); // Kiểm tra lỗi nếu có\r\n//     });\r\n//     setModalVisible(false); // Ẩn modal sau khi nhấn OK\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // Chờ khi modal được nhấn OK\r\n//     // Khi người dùng nhấn OK, nhạc sẽ bắt đầu phát\r\n//   }, [audio]);\r\n\r\n//   return (\r\n//     <div>\r\n//       {modalVisible && (\r\n//         <div className=\"modal\">\r\n//           <div className=\"modal-content\">\r\n//             <p>Click OK to play music!</p>\r\n//             <button onClick={handlePlayMusic}>OK</button>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Các phần tử khác trong ứng dụng */}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default BackgroundMusic;\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport './BackgroundMusic.css';\r\n\r\nconst BackgroundMusic = () => {\r\n  const [audio] = useState(new Audio(require('./music.mp3')));\r\n  const [modalVisible, setModalVisible] = useState(true); // Hiển thị modal\r\n  const [musicEnabled, setMusicEnabled] = useState(false); // Trạng thái phát nhạc\r\n\r\n  const handlePlayMusic = () => {\r\n    audio.loop = true; // Lặp lại nhạc\r\n    audio.play().catch(error => {\r\n      console.error(\"Error playing audio:\", error); // Kiểm tra lỗi nếu có\r\n    });\r\n    setMusicEnabled(true);\r\n    setModalVisible(false); // Ẩn modal sau khi nhấn OK\r\n  };\r\n\r\n  const handleCancelMusic = () => {\r\n    audio.pause(); // Dừng nhạc\r\n    audio.currentTime = 0; // Reset về đầu\r\n    setMusicEnabled(false);\r\n    setModalVisible(false); // Ẩn modal\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {modalVisible && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <p>Click OK to play music!</p>\r\n            <button onClick={handlePlayMusic} style={{marginRight: \"10px\"}}>OK</button>\r\n            <button onClick={handleCancelMusic}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Các phần tử khác trong ứng dụng */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BackgroundMusic;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./app.css\";\r\nimport { ArtGallery } from \"../ArtGallery/ArtGallery\";\r\nimport BackgroundMusic from \"../ArtGallery/BackgroundMusic\";\r\n\r\nexport default function App() {\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BackgroundMusic />\r\n      <ArtGallery windowWidth={width} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n}\r\n\r\nexport function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from \"./App/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}